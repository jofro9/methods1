columns[,1]
car <- new_car(rownames(columns[i,]), columns[i,1], columns[i,2], columns[i,3])
car
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in columns) {
car <- new_car(rownames(columns[i,1]), columns[i,2], columns[i,3], columns[i,4])
print(car)
}
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in columns) {
car <- new_car(rownames(columns[i,1]), columns[i,2], columns[i,3], columns[i,4])
print.new_car(car)
}
columns[1,2]
for(i in 1:length(columns) {
for(i in 1:length(columns)) {
car <- new_car(rownames(columns[i,1]), columns[i,2], columns[i,3], columns[i,4])
print.new_car(car)
}
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in 1:length(columns)) {
car <- new_car(rownames(columns[i,1]), columns[i,2], columns[i,3], columns[i,4])
print.new_car(car)
}
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in 1:length(columns)) {
car <- new_car(rownames(columns[i,]), columns[i,1], columns[i,1], columns[i,3])
print.new_car(car)
}
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in 1:length(rownames(columns))) {
car <- new_car(rownames(columns[i,]), columns[i,1], columns[i,1], columns[i,3])
print.new_car(car)
}
columns <- mtcars[, c(1, 2, 4)]
for(i in 1:length(rownames(columns))) {
car <- new_car(rownames(columns[i,]), columns[i,1], columns[i,1], columns[i,3])2
#part c
columns <- mtcars[, c(1, 2, 4)]
for(i in 1:length(rownames(columns))) {
car <- new_car(rownames(columns[i,]), columns[i,1], columns[i,2], columns[i,3])
print.new_car(car)
}
knitr::opts_chunk$set(echo = TRUE, include = TRUE)
```{r}
for (i in 1:nrow(mtcars)){
x <- mtcars [i, ]
car2 <- car(rownames(x), x[1], x[2], x[4])
print(car2)
}
print.car_s3 <- function(car) {
cat("name: ", as.character(car$name), "\n")
cat("mpg: ", as.character(car$mpg), "\n")
cat("cyl: ", as.character(car$cyl), "\n")
cat("hp: ", as.character(car$hp), "\n")
}
1530/2
765+90
855/2
765*2
765/2
+90
382.5+90
382.5+45
# Problem 1
a <- data.frame(c(21, 49), c(13, 120))
# Part A
se <- a[1,1] / (a[1,1] + a[2,1])
# Part B
# If someone has a VivaDiag positive test for SARS-CoV-2, then there is a 30% probability that they will be clinically diagnosed with SARS-CoV-2.
# Part C
sp <- a[2,2] / (a[1, 2] + a[2,2])
# Part D
# If someone has a VivaDiag negative test for SARS-CoV-2, then there is a 90% probability that they will NOT be clinically diagnosed with SARS-CoV-2.
# Part E
ppv <- a[1,1] / (a[1,1] + a[1,2])
# Part F
# If VivaDiag test score is positive for SARS-CoV-2, then there is a 62% probability that a diagnosis of SARS-CoV-2 is a true diagnosis.
# Part G
# The arbitrary rule of thumb we have been using for Bias/SE (accuracy) is 0.1, meaning that if our estimate for accuracy exceed +/- 0.1 then we should be concerned about the accuracy of our confidence interval. So while in this case, the interpretation for the confidence interval (it does not contain 50%) we should not use this confidence interval, because our accuracy (-0.184) exceeds +/- 0.1.
# Problem 2
# Part A
v <- 400
beta <- qnorm(0.95)
alpha <- qnorm(1 - (0.10) / 2)
d <- 10
n <- (v * ((beta + alpha) ^ 2)) / (10 ^ 2)
# Part B
n2 <- 25
p2 <- (d / (sqrt(v)/sqrt(n2))) - alpha
# Part C
# We are saying that if the new treatment for GERD really is a better treatment then with a probability of 85.5%, we will in fact find a positive (one-tail) difference, from the old treatment to the new treatment.
# Part D
# With unknown variance, we would allow for larger tails on our distributions. Hence our power will decrease. When variance is unknown, we have to allow for greater variability in the data, which will decrease our power to detect a difference between the old treatment and the new treatment.
# Problem 3
b <- data.frame(c(784, 681), c(3111-784, 3980-681))
p1 <- b[1,1] / (b[1,1] + b[1,2])
p2 <- b[2,1] / (b[2,1] + b[2,2])
# Part A
rr <- p1 / p2
# Part B
# Those who were progressors have 1.47 times the risk of retinopathy, compared with those who are nonprogressors.
# Part C
rr_ci <- c(
exp(log(rr) - qnorm(1-0.025) * sqrt((b[1,2]/(b[1,1] * (b[1,1] + b[1,2]))) + (b[2,2]/(b[2,1] * (b[2,1] + b[2,2]))))),
exp(log(rr) + qnorm(1-0.025) * sqrt((b[1,2]/(b[1,1] * (b[1,1] + b[1,2]))) + (b[2,2]/(b[2,1] * (b[2,1] + b[2,2])))))
)
# Part D
# With 95% confidence, we can say that the risk ratio of developing retinopathy for progressors is 1.47, and will fall within the interval [1.34, 1.61].
# Part E
# Since our confidence interval does not contain 1, we can say that there is a significant increase of risk of developing retinopathy for progressors, over nonprogressors.
# Part F
# Fisher's Exact, Pearson's chi-squared test, Permutation test
# I would call a Fisher's exact test a type of permutation test
# Part A
se <- a[1,1] / (a[1,1] + a[2,1])
# Part C
sp <- a[2,2] / (a[1, 2] + a[2,2])
View(a)
n <- (v * ((beta + alpha) ^ 2)) / (10 ^ 2)
?group_by()
library(tidyverse)
?group_by()
?summarize()
1.75*100000
(1 * 42) + (2 * 19) + (3 * 17) + (4 * 12) + (5 * 8) + (5 * 2)
knitr::opts_chunk$set(echo = TRUE, include = TRUE)
library(tidyverse)
library(ggplot2)
library(pacman)
library(jpeg)
# Linear regression cholesterol and weight
fit_lm <- lm(chol ~ hw7$wtkg, data = hw7)
# Data
hw7 <- data.frame(
id = 1:7,
gender = c(0,1,0,1,0,1,0),
chol = c(254,402,288,354,220,451,405),
wtkg = c(57,79,63,84,30,76,65),
age = c(23,57,28,46,34,57,52)
)
# Linear regression cholesterol and weight
fit_lm <- lm(chol ~ hw7$wtkg, data = hw7)
# Info for table
sum <- summary(fit_lm)
sum
ci_lm <- confint(fit_lm)
ci_lm
ci_lm <- confint(fit_lm)
ci_lm
ci_lm$
Intercept
ci_lm[1,1]
# Info for table
sum <- summary(fit_glm)
sum
sum$coefficients
sum$Coefficients[1, 1]
sum$Coefficients[1]
sum$Coefficients[0]
sum$Coefficients[Estimate]
sum$Coefficients
# Linear regression cholesterol and weight
fit_lm <- lm(chol ~ hw7$wtkg, data = hw7)
# Info for table
sum <- summary(fit_lm)
sum
ci_lm <- confint(fit_lm)
ci_lm
cbind(sum, ci_lm)
# Linear regression cholesterol and weight
fit_lm <- lm(chol ~ hw7$wtkg, data = hw7)
# Info for table
sum <- summary(fit_lm)
sum
ci_lm <- confint(fit_lm)
ci_lm
c(sum, ci_lm)
cbind(sum$coefficients, ci_lm)
table(cbind(sum$coefficients, ci_lm))
cbind(sum$coefficients, ci_lm)
sum$fstatistic
sum$call
sum$terms
library(installr)
updateR()
restart_RGui()
# Part B
summary(fit1)
setwd("C:/Users/froelijo/dev/methods1/hw10")
lead = read.csv('lead2.csv')
# Part A
fit1 = lm(iq ~ miles + first2y + miles * first2y, data = lead)
# Part B
summary(fit1)
# Part B
summary(fit1)$coefficients[4, 4]
fit1$coefficients
knitr::opts_chunk$set(echo = TRUE, include = TRUE)
amniotic <- data.frame(
cells = c(
1.13, 1.20, 1.00, 0.91, 1.05, 1.75, 1.45, 1.55, 1.64, 1.60, 2.30, 2.15, 2.25, 2.40, 2.49, 3.18, 3.10, 3.28, 3.35, 3.12
),
temp = c(
rep(40,5), rep(60,5), rep(80,5), rep(100,5)
)
)
amniotic$ln_cells <- log(amniotic$cells)
par(mfrow = c(2, 2))
plot(x = amniotic$temp, y = amniotic$ln_cells, main = 'Scatterplot')
abline(fit_a)
knitr::opts_chunk$set(echo = TRUE, include = TRUE)
amniotic <- data.frame(
cells = c(
1.13, 1.20, 1.00, 0.91, 1.05, 1.75, 1.45, 1.55, 1.64, 1.60, 2.30, 2.15, 2.25, 2.40, 2.49, 3.18, 3.10, 3.28, 3.35, 3.12
),
temp = c(
rep(40,5), rep(60,5), rep(80,5), rep(100,5)
)
)
amniotic$ln_cells <- log(amniotic$cells)
fit_a <- lm(ln_cells ~ temp, data = amniotic)
summary(fit_a)
coeff <- fit_a$coefficients
coeff_t <- exp(fit_a$coefficients)
ci_t <- exp(confint(fit_a))
par(mfrow = c(2, 2))
plot(x = amniotic$temp, y = amniotic$ln_cells, main = 'Scatterplot')
abline(fit_a)
plot(x = amniotic$temp, y = rstudent(fit_a), main = "Jackknife Scatterplot")
abline(h = 0, lty = 2)
hist(x = rstudent(fit_a), freq = FALSE, main = "Jacknife Histogram")
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
plot(ppoints(length(rstudent(fit_a))), sort(pnorm(rstudent(fit_a))), main = "Normal P-P")
abline(a = 0, b = 1)
library(tidyverse)
# Part E
ggplot(lead, aes(iq, resdur)) + geom_points
# Part E
ggplot(lead, aes(iq, resdur)) + geom_points()
# Part E
ggplot(lead, aes(iq, resdur)) + geom_points()
# Part E
ggplot(lead, aes(iq, resdur)) + geom_point()
# Part E
ggplot(lead, aes(iq, miles, color = factor(first2yr))) + geom_point()
lead = read.csv('lead2.csv')
# Part E
ggplot(lead, aes(iq, miles, color = factor(first2y))) + geom_point()
# Part E
ggplot(lead, aes(miles, iq, color = factor(first2y))) + geom_point()
?geom_smooth()
# Part E
ggplot(lead, aes(miles, iq, color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, aes(color = factor(first2y)))
?geom_smooth()
# Part E
ggplot(lead, aes(miles, iq, color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y)))
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = 0:4, limits = c(0, 4)) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150))
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4)) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150))
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE)
?GGTITLE()
?ggtitle()\
?ggtitle()
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
theme(legend.title = "Resided First 2 years")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
theme(legend.title = element_text("Resided First 2 years"))
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(fill = "Residence First 2 Years")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(fill = "Residence First 2 Years")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(color = "Residence First 2 Years")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2 Years", color = "Residence First 2 Years")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2 Years", color = "Residence First 2")
# Part E
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2", color = "Residence First 2")
# Part E
lead$first2y = if_else(lead$first2y == 1, "Yes", "No")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2", color = "Residence First 2")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2", color = "Residence First 2") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence First 2", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "RResidence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(c(shape, color) = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(c(shape, color) = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
labs(c(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
# Part E
lead$first2y = if_else(lead$first2y == 1, "Yes", "No")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
library(tidyverse)
setwd("C:/Users/froelijo/dev/methods1/hw10")
lead = read.csv('lead2.csv')
# Part A
fit1 = lm(iq ~ miles + first2y + miles * first2y, data = lead)
fit1$coefficients
# Part B
summary(fit1)$coefficients[4, 4]
# Part E
lead$first2y = if_else(lead$first2y == 1, "Yes", "No")
ggplot(lead, aes(miles, iq, shape = factor(first2y), color = factor(first2y))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm", aes(color = factor(first2y))) +
ggtitle("IQ Score by Distance from Smelter") +
xlab("Distance (miles)") +
ylab("IQ (score)") +
scale_x_continuous(breaks = seq(0, 4, 0.5), limits = c(0, 4), minor_breaks = FALSE) +
scale_y_continuous(breaks = seq(50, 150, 10), limits = c(50, 150), minor_breaks = FALSE) +
labs(shape = "Residence During First 2 Years:", color = "Residence During First 2 Years:") +
theme(legend.position = "bottom")
# Part F
fit1$coefficients
